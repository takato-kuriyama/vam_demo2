##Tailwind CSS
https://tailwindcss.com
 bg-(color):    背景色を(color)に
 text-(color):  テキスト色
 text-lg:   文字サイズを大きめに
 p-4:   patting(内側余白)を4単位(16px相当)に
 pt-4:  patting top(pr pb pl)
 m-4:   margin(外側余白)を4単位に
 mt-4:  margin-top(mr ml mb)
 border-b:  下側にボーダーを追加
 shadow-sm: 小さい影を追加
 flex:  フレックスボックスレイアウト(横or縦)を適用
 grid:  グリッドレイアウト(行と列)を適用
 items-center:  縦方向の中央揃え
 justify-between:   横方向で要素を両端に配置
 justify-start: 左寄せ
 max-w-(size):  最大幅を設定
 mx-auto:   左右のマージンを自動で均等に
 space-x-4: 横方向の子要素間に16pxの間隔を設定
 h-(size):  高さ
 w-(size):  幅

##ライブラリ
 list.map()=>(処理1):    listの中身を(処理1)する

##Study
 const[values, setValues] = useState(...;)
    //useStateフック: valuesという変数と、それを更新するためのsetValues関数を作成

 useState(() => {
    ~~
    return value;
 });
    //useState内で関数を使用→初期化関数=初回レンダリング時にのみ実行される

 useEffect(() => {
    ~~
}, [依存する値]); ←依存配列
    //空の依存配列[] → マウント時に一回だけ実行
    //値を監視[A] → Aが変わるたびに実行
    //複数の値を監視[A,B] →どちらかが変わるたびに実行

 const 関数名 = (引数) => {
    return 何か;
 }  //アロー関数

 function 関数名(引数){
    return 何か;
 }  //通常の関数（上記アロー関数と同じ）

 localStorage.getItem('key') // データの取得
 localStorage.setItem('key', value) // データの保存
    //ブラウザにデータを文字列で保存する機能

 const A = [1,2,3];
 const updateA = [...A];
    //結果: [updateA = [1,2,3]]
    // ...はオブジェクトのコピーと拡張(スプレッド演算子)
 

##メモ
 312385
 323132
 340967
 266841
 304422
 248600
 >1796347(SUM)
 >9980(A)
 >2797(B-A)
 >126(day)
 =352422yen